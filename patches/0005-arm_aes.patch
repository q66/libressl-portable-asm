This hooks ARM 64 and 32-bit HWAES and BSAES/VPAES into the build.

--- a/crypto/Makefile.am.elf-arm
+++ b/crypto/Makefile.am.elf-arm
@@ -1,4 +1,6 @@
 ASM_ARM_ELF = aes/aes-elf-armv4.S
+ASM_ARM_ELF += aes/aesv8-elf-armv4.S
+ASM_ARM_ELF += aes/bsaes-elf-armv4.S
 ASM_ARM_ELF += bn/gf2m-elf-armv4.S
 ASM_ARM_ELF += bn/mont-elf-armv4.S
 ASM_ARM_ELF += sha/sha1-elf-armv4.S
@@ -19,6 +21,7 @@ EXTRA_DIST += $(ASM_ARM_ELF)
 
 if HOST_ASM_ELF_ARM
 libcrypto_la_CPPFLAGS += -DAES_ASM
+libcrypto_la_CPPFLAGS += -DBSAES_ASM
 libcrypto_la_CPPFLAGS += -DOPENSSL_BN_ASM_MONT
 libcrypto_la_CPPFLAGS += -DOPENSSL_BN_ASM_GF2m
 libcrypto_la_CPPFLAGS += -DGHASH_ASM
--- a/crypto/evp/e_aes.c
+++ b/crypto/evp/e_aes.c
@@ -160,6 +160,26 @@ void AES_xts_decrypt(const char *inp, char *out, size_t len,
 #   define HWAES_xts_encrypt aes_p8_xts_encrypt
 #   define HWAES_xts_decrypt aes_p8_xts_decrypt
 #  endif /* PPC */
+
+#  if (defined(__arm__) || defined(__arm) || defined(__aarch64__))
+#   include "arm_arch.h"
+#   if __ARM_MAX_ARCH__>=7
+#    if defined(BSAES_ASM)
+#     define BSAES_CAPABLE (OPENSSL_armcap_P & ARMV7_NEON)
+#    endif
+#    if defined(VPAES_ASM)
+#     define VPAES_CAPABLE (OPENSSL_armcap_P & ARMV7_NEON)
+#    endif
+#    define HWAES_CAPABLE (OPENSSL_armcap_P & ARMV8_AES)
+#    define HWAES_set_encrypt_key aes_v8_set_encrypt_key
+#    define HWAES_set_decrypt_key aes_v8_set_decrypt_key
+#    define HWAES_encrypt aes_v8_encrypt
+#    define HWAES_decrypt aes_v8_decrypt
+#    define HWAES_cbc_encrypt aes_v8_cbc_encrypt
+#    define HWAES_ecb_encrypt aes_v8_ecb_encrypt
+#    define HWAES_ctr32_encrypt_blocks aes_v8_ctr32_encrypt_blocks
+#   endif
+#  endif /* ARM */
 # endif /* OPENSSL_CPUID_OBJ */
 
 # if defined(HWAES_CAPABLE)
