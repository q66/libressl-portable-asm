The default behavior of libressl-portable build system seems to be fairly
broken - it accidentally always enables __STRICT_ALIGNMENT on every arch
(because the BSWAP4 check fails to compile) and even then the BSWAP4 check
appears to be wrong anyway.

Do the same as OpenSSL and always enable the macro except on x86, aarch64
and s390(x).

Upstream issue: https://github.com/libressl-portable/portable/issues/602
Upstream PR: https://github.com/libressl-portable/portable/pull/604

--- a/configure.ac
+++ b/configure.ac
@@ -75,26 +75,12 @@ AC_ARG_ENABLE([tests],
        [enable_tests="yes"])
 AM_CONDITIONAL([ENABLE_TESTS], [test "x$enable_tests" = xyes])
 
-# Add CPU-specific alignment flags
-old_cflags=$CFLAGS
-CFLAGS="$CFLAGS -I$srcdir/include"
-AC_MSG_CHECKING([if BSWAP4 builds without __STRICT_ALIGNMENT])
-AC_TRY_COMPILE([#include "$srcdir/crypto/modes/modes_lcl.h"],
-	       [int a = 0; BSWAP4(a);],
-	       AC_MSG_RESULT([yes])
-	       BSWAP4=yes,
-	       AC_MSG_RESULT([no])
-	       BSWAP4=no)
-CFLAGS="$old_cflags"
-
 AS_CASE([$host_cpu],
-	[*sparc*], [CPPFLAGS="$CPPFLAGS -D__STRICT_ALIGNMENT"],
 	[*arm*], [host_cpu=arm],
 	[*amd64*], [host_cpu=x86_64 HOSTARCH=intel],
 	[i?86], [HOSTARCH=intel],
 	[x86_64], [HOSTARCH=intel]
 )
-AS_IF([test "x$BSWAP4" = "xyes" -a "$host_cpu" = "arm" ],,CPPFLAGS="$CPPFLAGS -D__STRICT_ALIGNMENT")
 AM_CONDITIONAL([HOST_CPU_IS_INTEL], [test "x$HOSTARCH" = "xintel"])
 
 AC_MSG_CHECKING([if .gnu.warning accepts long strings])
--- a/crypto/gost/gost2814789.c
+++ b/crypto/gost/gost2814789.c
@@ -56,6 +56,7 @@
 #ifndef OPENSSL_NO_GOST
 #include <openssl/objects.h>
 #include <openssl/gost.h>
+#include <machine/endian.h>
 
 #include "gost_locl.h"
 
--- a/include/compat/machine/endian.h
+++ b/include/compat/machine/endian.h
@@ -37,4 +37,14 @@
 
 #endif
 
+#ifndef __STRICT_ALIGNMENT
+#define __STRICT_ALIGNMENT
+#if defined(__i386)    || defined(__i386__)    || \
+    defined(__x86_64)  || defined(__x86_64__)  || \
+    defined(__s390__)  || defined(__s390x__)   || \
+    defined(__aarch64__)
+#undef __STRICT_ALIGNMENT
+#endif
+#endif
+
 #endif
