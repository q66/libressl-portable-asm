This patches arm_arch.h to include all the flags needed for aarch64
cpu detection and optimized algorithms.

--- a/crypto/arm_arch.h
+++ b/crypto/arm_arch.h
@@ -10,15 +10,22 @@
 #  else
 #   define __ARMEL__
 #  endif
-# elif defined(__GNUC__)
+# elif defined(__GNUC__) || defined(__clang__)
+#  if	defined(__aarch64__)
+#   define __ARM_ARCH__ 8
+#   ifdef __AARCH64EB__
+#    define __ARMEB__
+#   else
+#    define __ARMEL__
+#   endif
+#  elif defined(__ARM_ARCH)
+#   define __ARM_ARCH__ __ARM_ARCH
   /*
    * Why doesn't gcc define __ARM_ARCH__? Instead it defines
    * bunch of below macros. See all_architectures[] table in
    * gcc/config/arm/arm.c. On a side note it defines
    * __ARMEL__/__ARMEB__ for little-/big-endian.
    */
-#  if	defined(__ARM_ARCH)
-#   define __ARM_ARCH__ __ARM_ARCH
 #  elif	defined(__ARM_ARCH_8A__)
 #   define __ARM_ARCH__ 8
 #  elif	defined(__ARM_ARCH_7__)	|| defined(__ARM_ARCH_7A__)	|| \
@@ -42,15 +49,20 @@
 # endif
 #endif
 
+/* compatibility with cryptogams/openssl asm */
+#define __ARM_MAX_ARCH__ __ARM_ARCH__
+
 #if !defined(__ASSEMBLER__)
 extern unsigned int OPENSSL_armcap_P;
+#endif
 
 #define ARMV7_NEON	(1<<0)
-#define ARMV8_AES	(1<<1)
-#define ARMV8_SHA1	(1<<2)
-#define ARMV8_SHA256	(1<<3)
-#define ARMV8_PMULL	(1<<4)
-#endif
+#define ARMV7_TICK	(1<<1)
+#define ARMV8_AES	(1<<2)
+#define ARMV8_SHA1	(1<<3)
+#define ARMV8_SHA256	(1<<4)
+#define ARMV8_PMULL	(1<<5)
+#define ARMV8_SHA512	(1<<6)
 
 #if defined(__OpenBSD__)
 #define __STRICT_ALIGNMENT
